/*
 * Copyright (C) 2017 binbin.
 * All rights reserved.
 */

buildscript {
    repositories {
        repositories {
            maven { url 'http://repo1.maven.org/maven2/' }
            mavenCentral()
            jcenter()
        }
    }

    dependencies {

        classpath 'org.akhikhl.gretty:gretty:+'
        classpath 'com.bmuschko:gradle-nexus-plugin:+'
        classpath 'com.github.ben-manes:gradle-versions-plugin:+'

        classpath 'com.bmuschko:gradle-docker-plugin:2.5.1'
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.2.5.RELEASE'
    }
}

allprojects {

    group 'cn.com.yxb.springmvc-analysis'
    version '1.0-SNAPSHOT'

    apply plugin: 'java'

    ext {
        defaultEncoding = 'UTF-8'
        defaultLocale = 'en_US'

        gradleScriptDir = "${rootDir}/gradle"
    }

    repositories {
        maven { url 'http://repo1.maven.org/maven2/' }
        mavenCentral()
        jcenter()
    }

    dependencies {
        // the logger libraries.
        compile "org.slf4j:slf4j-api:${slf4jVersion}"
        compile "ch.qos.logback:logback-classic:${logbackVersion}"
        runtime "org.slf4j:jcl-over-slf4j:${slf4jVersion}"
        runtime "org.slf4j:log4j-over-slf4j:${slf4jVersion}"

        compile "joda-time:joda-time:${jodatimeVersion}"

        compile "com.google.guava:guava:${guavaVersion}"

        // apache commons libraries.
        compile "org.apache.commons:commons-lang3:${commonsLang3Version}"
        compile "commons-codec:commons-codec:${commonsCodecVersion}"
        compile "commons-io:commons-io:${commonsIOVersion}"
        compile "org.apache.commons:commons-collections4:${commonsCollectionsVersion}"

        compile "org.apache.httpcomponents:httpclient:${httpclientVersion}"

        // database libraries.
        compile "com.alibaba:druid:${druidVersion}"
        runtime "org.postgresql:postgresql:${postgresqlVersion}"
        runtime "org.postgis:postgis-jdbc:${postgisVersion}"

        compile "org.antlr:antlr4:${antlr4Version}"
        compile "org.aspectj:aspectjweaver:${aspectjVersion}"

        // the test libraries.
        testCompile "org.uncommons:reportng:${reportngVersion}"
        testCompile("junit:junit:${junitVersion}") {
            exclude group: 'org.hamcrest'
        }
        testCompile "org.testng:testng:${testngVersion}"
        testCompile "org.hamcrest:hamcrest-all:${hamcrestVersion}"
        testCompile "org.mockito:mockito-core:${mockitoVersion}"
        testCompile "com.jayway.jsonpath:json-path:${jsonpathVersion}"
        testCompile "com.google.inject:guice:${guiceVersion}"
        testCompile "org.dbunit:dbunit:${dbunitVersion}"
        testCompile "org.hamcrest:hamcrest-all:${hamcrestVersion}"

        testCompile("com.excilys.ebi.spring-dbunit:spring-dbunit-core:${springDbUnitVersion}") {
            transitive = false
        }
        testCompile("com.excilys.ebi.spring-dbunit:spring-dbunit-test:${springDbUnitVersion}") {
            transitive = false
        }

    }


    processResources {
        group = 'compile'
    }

    processTestResources {
        group = 'compile'
    }
}


configure(rootProject) {

    apply plugin: 'groovy'

    task wrapper(type: Wrapper) {
        group = 'build setup'
        description = 'Generates gradlew[.bat] scripts.'
        gradleVersion = "3.5"
        distributionUrl = "http://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
    }

    // don't publish the default jar for the root project
    configurations.archives.artifacts.clear()
}

